diff -BurN popt-1.16.old/configure.ac popt-1.16/configure.ac
--- popt-1.16.old/configure.ac	2010-05-05 04:55:54.000000000 +0800
+++ popt-1.16/configure.ac	2012-07-08 14:39:18.862275700 +0800
@@ -1,4 +1,4 @@
-AC_PREREQ(2.57)
+AC_PREREQ(2.63)
 AC_INIT(popt, 1.16, popt-devel@rpm5.org)
 AC_CONFIG_SRCDIR([popt.h])
 AC_CONFIG_HEADERS([config.h])
@@ -7,7 +7,7 @@
 dnl Must come before AM_INIT_AUTOMAKE.
 dnl AC_CONFIG_AUX_DIR([build-aux])
 AC_CONFIG_MACRO_DIR([m4])
-AM_INIT_AUTOMAKE([foreign -Wall])
+AM_INIT_AUTOMAKE([1.11 silent-rules foreign -Wall])
 AM_MAINTAINER_MODE
 
 # Library code modified:                              REVISION++
@@ -24,7 +24,7 @@
 AC_PROG_CC
 
 AC_PROG_INSTALL
-AC_PROG_LIBTOOL
+LT_INIT([win32-dll])
 
 dnl if CC is gcc, we can rebuild the dependencies (since the depend rule
 dnl requires gcc).  If it's not, don't rebuild dependencies -- use what was
@@ -48,6 +48,10 @@
 AC_ISC_POSIX
 AM_C_PROTOTYPES
 
+case "$host_os" in
+  mingw*) LIBS="$LIBS -lole32" ;;
+esac
+
 AC_CHECK_HEADERS(float.h fnmatch.h glob.h langinfo.h libintl.h mcheck.h unistd.h)
 
 # For some systems we know that we have ld_version scripts.
@@ -85,6 +89,7 @@
 AC_CHECK_FUNCS(getuid geteuid iconv mtrace __secure_getenv setregid stpcpy strerror vasprintf srandom)
 
 AM_GNU_GETTEXT([external])
+AM_GNU_GETTEXT_VERSION([0.17])
 AM_ICONV_LINK
 
 popt_sysconfdir="${sysconfdir}"
diff -BurN popt-1.16.old/Makefile.am popt-1.16/Makefile.am
--- popt-1.16.old/Makefile.am	2010-05-05 04:55:54.000000000 +0800
+++ popt-1.16/Makefile.am	2012-07-08 14:39:59.662609300 +0800
@@ -1,6 +1,6 @@
 # Makefile for popt library.
 
-AUTOMAKE_OPTIONS = 1.4 foreign
+AUTOMAKE_OPTIONS = 1.11 foreign
 
 LINT =		splint
 MCCABE =	pmccabe
@@ -39,15 +39,16 @@
 
 TESTS = $(top_srcdir)/testit.sh
 
-include_HEADERS = popt.h
+include_HEADERS = popt.h poptdll.h
 
 usrlibdir = $(libdir)
 usrlib_LTLIBRARIES = libpopt.la
 
+libpopt_la_CPPFLAGS = $(AM_CPPFLAGS) -DBUILDING_LIBPOPT
 libpopt_la_SOURCES = popt.c poptparse.c poptconfig.c popthelp.c poptint.c
-libpopt_la_LDFLAGS = -no-undefined @LTLIBINTL@ @LTLIBICONV@
+libpopt_la_LDFLAGS = -no-undefined @LTLIBINTL@ @LTLIBICONV@ -export-symbols-regex "^_{0,1}popt"
 
-pkgconfigdir = $(prefix)/lib/pkgconfig
+pkgconfigdir = $(libdir)/pkgconfig
 pkgconfig_DATA = popt.pc
 
 if HAVE_LD_VERSION_SCRIPT
diff -BurN popt-1.16.old/popt.c popt-1.16/popt.c
--- popt-1.16.old/popt.c	2010-01-19 08:39:10.000000000 +0800
+++ popt-1.16/popt.c	2012-07-08 14:39:18.878276600 +0800
@@ -434,28 +434,37 @@
 {
     char *path = NULL, *s = NULL, *se;
     char *t = NULL;
+    size_t lenexe = strlen(".exe");
 
     if (argv0 == NULL) return NULL;	/* XXX can't happen */
 
-    /* If there is a / in argv[0], it has to be an absolute path. */
-    /* XXX Hmmm, why not if (argv0[0] == '/') ... instead? */
-    if (strchr(argv0, '/'))
+    if (IS_ABSOLUTE_PATH(argv0))
 	return xstrdup(argv0);
 
     if ((path = getenv("PATH")) == NULL || (path = xstrdup(path)) == NULL)
 	return NULL;
 
-    /* The return buffer in t is big enough for any path. */
-    if ((t = malloc(strlen(path) + strlen(argv0) + sizeof("/"))) != NULL)
+    /* The return buffer in t is big enough for any path, including */
+    /* an possible additional ".exe" on win32. Use sizeof here, to */
+    /* accommodate \0 (it's computed at compiletime anyway, so no cost) */
+    if ((t = malloc(strlen(path) + strlen(argv0) + sizeof("/") + sizeof(".exe"))) != NULL)
     for (s = path; s && *s; s = se) {
 
 	/* Snip PATH element into [s,se). */
-	if ((se = strchr(s, ':')))
+	if ((se = FIRST_SEARCHPATH_SEPARATOR(s)))
 	    *se++ = '\0';
 
+#if defined(_WIN32) && !defined(__CYGWIN__)
+	/* Append argv0 to PATH element, and ".exe" if not already present */
+	if ((strlen(argv0) > lenexe)
+	  &&(strncasecmp(argv0 + strlen (argv0) - lenexe, ".exe", lenexe) == 0))
+	    (void) stpcpy(stpcpy(stpcpy(t, s), "/"), argv0);
+	else
+	    (void) stpcpy(stpcpy(stpcpy(stpcpy(t, s), "/"), argv0), ".exe");
+#else
 	/* Append argv0 to PATH element. */
 	(void) stpcpy(stpcpy(stpcpy(t, s), "/"), argv0);
-
+#endif
 	/* If file is executable, bingo! */
 	if (!access(t, X_OK))
 	    break;
@@ -487,14 +496,14 @@
 	return POPT_ERROR_NOARG;
 
     if (item->argv == NULL || item->argc < 1 ||
-	(!con->execAbsolute && strchr(item->argv[0], '/')))
+	(!con->execAbsolute && IS_ABSOLUTE_PATH(item->argv[0])))
 	    return POPT_ERROR_NOARG;
 
     argv = malloc(sizeof(*argv) *
 			(6 + item->argc + con->numLeftovers + con->finalArgvCount));
     if (argv == NULL) return POPT_ERROR_MALLOC;
 
-    if (!strchr(item->argv[0], '/') && con->execPath != NULL) {
+    if (!CONTAINS_PATH_SEPARATOR(item->argv[0]) && con->execPath != NULL) {
 	char *s = malloc(strlen(con->execPath) + strlen(item->argv[0]) + sizeof("/"));
 	if (s)
 	    (void)stpcpy(stpcpy(stpcpy(s, con->execPath), "/"), item->argv[0]);
@@ -562,7 +571,11 @@
 #endif
 
 /*@-nullstate@*/
+#if defined(_WIN32) && !defined(__CYGWIN__)
+    rc = execvp(argv[0], (const char *const *)argv);
+#else
     rc = execvp(argv[0], (char *const *)argv);
+#endif
 /*@=nullstate@*/
 
 exit:
diff -BurN popt-1.16.old/popt.h popt-1.16/popt.h
--- popt-1.16.old/popt.h	2009-07-27 01:09:27.000000000 +0800
+++ popt-1.16/popt.h	2012-07-08 14:39:18.887277100 +0800
@@ -10,6 +10,7 @@
 #define H_POPT
 
 #include <stdio.h>			/* for FILE * */
+#include <poptdll.h>
 
 #define POPT_OPTION_DEPTH	10
 
@@ -165,12 +166,16 @@
  */
 /*@{*/
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /**
  * Empty table marker to enable displaying popt alias/exec options.
  */
 /*@-exportvar@*/
 /*@unchecked@*/ /*@observer@*/
-extern struct poptOption poptAliasOptions[];
+POPT_DLL_IMPEXP struct poptOption poptAliasOptions[];
 /*@=exportvar@*/
 #define POPT_AUTOALIAS { NULL, '\0', POPT_ARG_INCLUDE_TABLE, poptAliasOptions, \
 			0, "Options implemented via popt alias/exec:", NULL },
@@ -180,12 +185,12 @@
  */
 /*@-exportvar@*/
 /*@unchecked@*/ /*@observer@*/
-extern struct poptOption poptHelpOptions[];
+POPT_DLL_IMPEXP struct poptOption poptHelpOptions[];
 /*@=exportvar@*/
 
 /*@-exportvar@*/
 /*@unchecked@*/ /*@observer@*/
-extern struct poptOption * poptHelpOptionsI18N;
+POPT_DLL_IMPEXP struct poptOption * poptHelpOptionsI18N;
 /*@=exportvar@*/
 
 #define POPT_AUTOHELP { NULL, '\0', POPT_ARG_INCLUDE_TABLE, poptHelpOptions, \
@@ -218,9 +223,6 @@
 };
 /*@=exportconst@*/
 
-#ifdef __cplusplus
-extern "C" {
-#endif
 /*@-type@*/
 
 /** \ingroup popt
diff -BurN popt-1.16.old/poptconfig.c popt-1.16/poptconfig.c
--- popt-1.16.old/poptconfig.c	2009-05-20 21:18:07.000000000 +0800
+++ popt-1.16/poptconfig.c	2012-07-08 14:39:18.897277700 +0800
@@ -10,6 +10,15 @@
 #include "poptint.h"
 #include <sys/stat.h>
 
+#if defined(_WIN32) && !defined(__CYGWIN__)
+#include <io.h>
+#include <windows.h>
+#include <shlobj.h>
+#endif
+#ifndef O_BINARY
+#define O_BINARY 0
+#endif
+
 #if defined(HAVE_FNMATCH_H)
 #include <fnmatch.h>
 
@@ -141,33 +150,38 @@
 int poptSaneFile(const char * fn)
 {
     struct stat sb;
+#if !(defined(_WIN32) && !defined(__CYGWIN__))
     uid_t uid = getuid();
+#endif
 
     if (stat(fn, &sb) == -1)
 	return 1;
+
+#if !(defined(_WIN32) && !defined(__CYGWIN__))
     if ((uid_t)sb.st_uid != uid)
 	return 0;
+#endif
+
     if (!S_ISREG(sb.st_mode))
 	return 0;
+
+#if !(defined(_WIN32) && !defined(__CYGWIN__))
 /*@-bitwisesigned@*/
     if (sb.st_mode & (S_IWGRP|S_IWOTH))
 	return 0;
 /*@=bitwisesigned@*/
+#endif
+
     return 1;
 }
 
-int poptReadFile(const char * fn, char ** bp, size_t * nbp, int flags)
+static int poptReadFileFD(int fdno, char ** bp, size_t * nbp, int flags)
 {
-    int fdno;
     char * b = NULL;
     off_t nb = 0;
     char * s, * t, * se;
     int rc = POPT_ERROR_ERRNO;	/* assume failure */
 
-    fdno = open(fn, O_RDONLY);
-    if (fdno < 0)
-	goto exit;
-
     if ((nb = lseek(fdno, 0, SEEK_END)) == (off_t)-1
      || lseek(fdno, 0, SEEK_SET) == (off_t)-1
      || (b = calloc(sizeof(*b), (size_t)nb + 1)) == NULL
@@ -193,6 +207,8 @@
     {
 	for (t = b, s = b, se = b + nb; *s && s < se; s++) {
 	    switch (*s) {
+	    case '\r':
+		/*@switchbreak@*/ break; /* always skip literal '\r' */
 	    case '\\':
 		if (s[1] == '\n') {
 		    s++;
@@ -230,6 +246,17 @@
 /*@=compdef =nullstate @*/
 }
 
+int poptReadFile(const char * fn, char ** bp, size_t * nbp, int flags)
+{
+    int fdno;
+
+    fdno = open(fn, O_RDONLY|O_BINARY);
+    if (fdno < 0)
+	return POPT_ERROR_ERRNO;
+
+    return poptReadFileFD(fdno, bp, nbp, flags);
+}
+
 /**
  * Check for application match.
  * @param con		context
@@ -329,7 +356,7 @@
 	se = b;
 
 	/* Use the basename of the path as the long option name. */
-	{   const char * longName = strrchr(fn, '/');
+	{   const char * longName = LAST_PATH_SEPARATOR(fn);
 	    if (longName != NULL)
 		longName++;
 	    else
@@ -389,7 +416,7 @@
 }
 /*@=compmempass@*/
 
-int poptReadConfigFile(poptContext con, const char * fn)
+static int poptReadConfigFileFD(poptContext con, int fdno)
 {
     char * b = NULL, *be;
     size_t nb = 0;
@@ -398,7 +425,7 @@
     int rc;
     int xx;
 
-    if ((rc = poptReadFile(fn, &b, &nb, POPT_READFILE_TRIMNEWLINES)) != 0)
+    if ((rc = poptReadFileFD(fdno, &b, &nb, POPT_READFILE_TRIMNEWLINES)) != 0)
 	return (errno == ENOENT ? 0 : rc);
     if (b == NULL || nb == 0)
 	return POPT_ERROR_BADCONFIG;
@@ -410,6 +437,9 @@
     be = (b + nb);
     for (se = b; se < be; se++) {
 	switch (*se) {
+	  case '\r':
+	    se++; /* skip literal \r */
+	    /*@switchbreak@*/ break;
 	  case '\n':
 	    *te = '\0';
 	    te = t;
@@ -442,6 +472,30 @@
     return rc;
 }
 
+int poptReadConfigFile(poptContext con, const char * fn)
+{
+    int fdno;
+
+    fdno = open(fn, O_RDONLY|O_BINARY);
+    if (fdno < 0)
+	return (errno == ENOENT ? 0 : POPT_ERROR_ERRNO);
+
+    return poptReadConfigFileFD(con, fdno);
+}
+
+#ifdef _WIN32
+static int poptReadConfigFileW(poptContext con, const wchar_t * fn)
+{
+    int fdno;
+
+    fdno = _wopen(fn, O_RDONLY|O_BINARY);
+    if (fdno < 0)
+        return (errno == ENOENT ? 0 : POPT_ERROR_ERRNO);
+
+    return poptReadConfigFileFD(con, fdno);
+}
+#endif
+
 int poptReadConfigFiles(poptContext con, const char * paths)
 {
     char * buf = (paths ? xstrdup(paths) : NULL);
@@ -496,16 +550,179 @@
     return rc;
 }
 
+#if defined(_WIN32) && !defined(__CYGWIN__)
+static char *global_config_file = NULL;
+static wchar_t *global_config_fileW = NULL;
+
+static char *user_config_file = NULL;
+static wchar_t *user_config_fileW = NULL;
+
+#ifdef PIC
+/* DllMain function needed to fetch the DLL name and deduce the
+ * installation directory from that.
+ */
+BOOL WINAPI
+DllMain (HINSTANCE hinstDLL,
+        DWORD     fdwReason,
+        LPVOID    UNUSED(lpvReserved))
+{
+  wchar_t wcbfr[1000];
+  char cpbfr[1000];
+
+  switch (fdwReason)
+    {
+      case DLL_PROCESS_ATTACH:
+        if (GetVersion() < 0x80000000)
+          {
+            /* NT-based Windows has wide char API */
+            if (GetModuleFileNameW((HMODULE) hinstDLL,
+                                    wcbfr, sizeof(wcbfr)/sizeof(wcbfr[0])))
+              {
+                wchar_t *p = wcsrchr(wcbfr, L'\\');
+
+                if (p)
+                  *p = '\0';
+
+                p = wcsrchr(wcbfr, L'\\');
+                if (p && (wcsicmp(p + 1, L"bin") == 0))
+                  *p = '\0';
+
+                global_config_fileW = malloc((wcslen(wcbfr) +
+                                              wcslen(L"\\etc\\popt") +
+                                              1) * sizeof(wchar_t));
+                wcscpy(global_config_fileW, wcbfr);
+                wcscat(global_config_fileW, L"\\etc\\popt");
+              }
+          }
+        else
+          {
+            /* Win9x, yecch */
+            if (GetModuleFileNameA((HMODULE) hinstDLL,
+                                   cpbfr, sizeof(cpbfr)))
+              {
+                char *p = (char *)_mbsrchr((const unsigned char *)cpbfr, '\\');
+
+                if (p)
+                  *p = '\0';
+
+                p = (char *)_mbsrchr((const unsigned char *)cpbfr, '\\');
+                if (p && (stricmp(p + 1, "bin") == 0))
+                  *p = '\0';
+
+                global_config_file = malloc(strlen(cpbfr) +
+                                            strlen("\\etc\\popt") +
+                                            1);
+                strcpy(global_config_file, cpbfr);
+                strcat(global_config_file, "\\etc\\popt");
+              }
+          }
+        break;
+    }
+  return TRUE;
+}
+
+#else
+#warning Should build as DLL
+#endif
+
+/* code from mingw basetyps.h DEFINE_GUID; GUID value from msdn website */
+/* Need to specify explicitly because mingw w32api headers don't yet do so */
+const GUID FOLDERID_RoamingAppData = {0x3eb685db,0x65f9,0x4cf6,{0xa0,0x3a,0xe3,0xef,0x65,0x72,0x9f,0x3d}};
+typedef HRESULT (WINAPI * SHGetKnownFolderIDList_FP)(
+    REFGUID rfid,
+    DWORD dwFlags,
+    HANDLE hToken,
+    LPITEMIDLIST* ppidl);
+
+static void get_user_config_file(void)
+{
+  char cpbfr[MAX_PATH+1];
+  wchar_t wcbfr[MAX_PATH+1];
+  HRESULT hr;
+  LPITEMIDLIST pidl = NULL;
+  SHGetKnownFolderIDList_FP fpSHGetKnownFolderIDList = NULL;
+  HMODULE hShell32;
+
+  /* Vista and above */
+  if ((hShell32 = GetModuleHandle("shell32.dll")) != NULL)
+    {
+      fpSHGetKnownFolderIDList = (SHGetKnownFolderIDList_FP)GetProcAddress(
+        hShell32, "SHGetKnownFolderIDList");
+      if (fpSHGetKnownFolderIDList)
+        {
+          hr = (*fpSHGetKnownFolderIDList)(&FOLDERID_RoamingAppData, 0, NULL, &pidl);
+          if (hr != S_OK && pidl != NULL)
+            {
+              CoTaskMemFree (pidl);
+              pidl = NULL;
+            }
+        }
+    }
+
+  /* fallback for older OS */
+  if (pidl == NULL)
+    {
+      hr = SHGetSpecialFolderLocation (NULL, CSIDL_APPDATA, &pidl);
+    }
+
+  if (hr == S_OK)
+    {
+      if (GetVersion() < 0x80000000)
+        {
+          if (SHGetPathFromIDListW(pidl, wcbfr))
+            {
+              user_config_fileW = malloc((wcslen (wcbfr) +
+                                          wcslen (L"\\popt.conf") +
+                                          1) * sizeof(wchar_t));
+              if (user_config_fileW)
+                {
+                  wcscpy(user_config_fileW, wcbfr);
+                  wcscat(user_config_fileW, L"\\popt.conf");
+                }
+            }
+        }
+      else
+        {
+          if (SHGetPathFromIDListA(pidl, cpbfr))
+            {
+              user_config_file = malloc(strlen (cpbfr) +
+                                        strlen ("\\popt.conf") +
+                                        1);
+              if (user_config_file)
+                {
+                  strcpy(user_config_file, cpbfr);
+                  strcat(user_config_file, "\\popt.conf");
+                }
+            }
+        }
+      CoTaskMemFree (pidl);
+    }
+}
+
+#endif
+
+
 int poptReadDefaultConfig(poptContext con, /*@unused@*/ UNUSED(int useEnv))
 {
+#if !(defined(_WIN32) && !defined(__CYGWIN__))
     static const char _popt_sysconfdir[] = POPT_SYSCONFDIR "/popt";
     static const char _popt_etc[] = "/etc/popt";
     char * home;
     struct stat sb;
+#endif
     int rc = 0;		/* assume success */
 
     if (con->appName == NULL) goto exit;
 
+#if defined(_WIN32) && !defined(__CYGWIN__)
+    if (global_config_fileW) {
+        rc = poptReadConfigFileW(con, global_config_fileW);
+        if (rc) goto exit;
+    } else if (global_config_file) {
+        rc = poptReadConfigFile(con, global_config_file);
+        if (rc) goto exit;
+    }
+#else
     if (strcmp(_popt_sysconfdir, _popt_etc)) {
 	rc = poptReadConfigFile(con, _popt_sysconfdir);
 	if (rc) goto exit;
@@ -510,9 +727,9 @@
 	rc = poptReadConfigFile(con, _popt_sysconfdir);
 	if (rc) goto exit;
     }
-
     rc = poptReadConfigFile(con, _popt_etc);
     if (rc) goto exit;
+#endif
 
 #if defined(HAVE_GLOB_H)
     if (!stat("/etc/popt.d", &sb) && S_ISDIR(sb.st_mode)) {
@@ -540,6 +757,16 @@
     if (rc) goto exit;
 #endif
 
+#if defined(_WIN32) && !defined(__CYGWIN__)
+    get_user_config_file();
+    if (user_config_fileW) {
+        rc = poptReadConfigFileW(con, user_config_fileW);
+        if (rc) goto exit;
+    } else if (user_config_file) {
+        rc = poptReadConfigFile(con, user_config_file);
+        if (rc) goto exit;
+    }
+#else
     if ((home = getenv("HOME"))) {
 	char * fn = malloc(strlen(home) + 20);
 	if (fn != NULL) {
@@ -550,6 +777,7 @@
 	    rc = POPT_ERROR_ERRNO;
 	if (rc) goto exit;
     }
+#endif
 
 exit:
     return rc;
@@ -571,7 +799,7 @@
     if (argv == NULL || argv[0] == NULL || options == NULL)
 	return con;
 
-    if ((argv0 = strrchr(argv[0], '/')) != NULL) argv0++;
+    if ((argv0 = LAST_PATH_SEPARATOR(argv[0])) != NULL) argv0++;
     else argv0 = argv[0];
    
     con = poptGetContext(argv0, argc, (const char **)argv, options, 0);
diff -BurN popt-1.16.old/poptdll.h popt-1.16/poptdll.h
--- popt-1.16.old/poptdll.h	1970-01-01 08:00:00.000000000 +0800
+++ popt-1.16/poptdll.h	2012-07-08 14:39:18.905278100 +0800
@@ -0,0 +1,30 @@
+#ifndef _POPT_DLL_IMPEXP_H_
+#define _POPT_DLL_IMPEXP_H_ 1
+
+#ifndef __GNUC__
+# define __DLL_IMPORT__	__declspec(dllimport)
+# define __DLL_EXPORT__	__declspec(dllexport)
+#else
+# define __DLL_IMPORT__	__attribute__((dllimport)) extern
+# define __DLL_EXPORT__	__attribute__((dllexport)) extern
+#endif
+
+#if defined(__WIN32__) || defined(_WIN32) || defined(__MSYS__)
+# ifdef BUILDING_LIBPOPT
+#  ifdef DLL_EXPORT /* defined by libtool when building objs for DLL */
+#   define POPT_DLL_IMPEXP	__DLL_EXPORT__
+#  else
+#   define POPT_DLL_IMPEXP	extern
+#  endif
+# else
+#  if defined(POPT_STATIC)
+#    define POPT_DLL_IMPEXP	extern
+#  else /* assume USE_POPT_DLL */
+#   define POPT_DLL_IMPEXP	__DLL_EXPORT__
+#  endif
+# endif
+#else /* __WIN32__ */
+# define POPT_DLL_IMPEXP
+#endif
+
+#endif /* _POPTDLLIMPEXP_H_ */
diff -BurN popt-1.16.old/popthelp.c popt-1.16/popthelp.c
--- popt-1.16.old/popthelp.c	2009-08-28 08:06:33.000000000 +0800
+++ popt-1.16/popthelp.c	2012-07-08 14:39:18.912278500 +0800
@@ -10,12 +10,16 @@
 
 #include "system.h"
 
+#if !(defined(_WIN32) && !defined(__CYGWIN__))
 #define        POPT_USE_TIOCGWINSZ
+#endif
 #ifdef POPT_USE_TIOCGWINSZ
 #include <sys/ioctl.h>
 #endif
 
+#if !(defined(_WIN32) && !defined(__CYGWIN__))
 #define	POPT_WCHAR_HACK
+#endif
 #ifdef 	POPT_WCHAR_HACK
 #include <wchar.h>			/* for mbsrtowcs */
 /*@access mbstate_t @*/
@@ -109,11 +113,11 @@
  * @param fp           FILE
  * @return             no. of columns 
  */ 
+#if defined(TIOCGWINSZ)
 static size_t maxColumnWidth(FILE *fp)
 	/*@*/
 {   
     size_t maxcols = _POPTHELP_MAXLINE;
-#if defined(TIOCGWINSZ)
     struct winsize ws;
     int fdno = fileno(fp ? fp : stdout);
 
@@ -123,9 +127,15 @@
 	if (ws_col > maxcols && ws_col < (size_t)256)
 	    maxcols = ws_col - 1;
     }
-#endif
     return maxcols;
 }   
+#else
+static size_t maxColumnWidth(FILE * UNUSED(fp))
+{
+    size_t maxcols = _POPTHELP_MAXLINE;
+    return maxcols;
+}
+#endif
 
 /**
  * Determine number of display characters in a string.
@@ -651,7 +661,7 @@
 	struct optionStackEntry * os = con->optionStack;
 	const char * fn = (os->argv ? os->argv[0] : NULL);
 	if (fn == NULL) return len;
-	if (strchr(fn, '/')) fn = strrchr(fn, '/') + 1;
+	if (FIRST_PATH_SEPARATOR(fn)) fn = LAST_PATH_SEPARATOR(fn) + 1;
 	/* XXX POPT_fprintf not needed for argv[0] display. */
 	fprintf(fp, " %s", fn);
 	len += strlen(fn) + 1;
diff -BurN popt-1.16.old/system.h popt-1.16/system.h
--- popt-1.16.old/system.h	2008-12-19 01:09:49.000000000 +0800
+++ popt-1.16/system.h	2012-07-08 14:39:18.919278900 +0800
@@ -42,6 +42,34 @@
 #include <libc.h>
 #endif
 
+#if defined(_WIN32) && !defined(__CYGWIN__)
+# include <mbstring.h>
+# define HAVE_DOS_BASED_FILE_SYSTEM
+# define PATH_SEPARATOR '/'
+# define PATH_SEPARATOR_2 '\\'
+# define SEARCHPATH_SEPARATOR ';'
+# define FIRST_SEARCHPATH_SEPARATOR(s) (first_searchpath_separator_mbs((s), SEARCHPATH_SEPARATOR))
+# define FIRST_PATH_SEPARATOR(s) (first_path_separator_mbs((s), PATH_SEPARATOR, PATH_SEPARATOR_2))
+# define LAST_PATH_SEPARATOR(s) (last_path_separator_mbs((s), PATH_SEPARATOR, PATH_SEPARATOR_2))
+#elif defined(__CYGWIN__)
+# include <mbstring.h>
+# define HAVE_DOS_BASED_FILE_SYSTEM
+# define PATH_SEPARATOR '/'
+# define PATH_SEPARATOR_2 '\\'
+# define SEARCHPATH_SEPARATOR ':'
+# define FIRST_SEARCHPATH_SEPARATOR(s) (first_searchpath_separator_mbs((s), SEARCHPATH_SEPARATOR))
+# define FIRST_PATH_SEPARATOR(s) (first_path_separator_mbs((s), PATH_SEPARATOR, PATH_SEPARATOR_2))
+# define LAST_PATH_SEPARATOR(s) (last_path_separator_mbs((s), PATH_SEPARATOR, PATH_SEPARATOR_2))
+#else
+# define PATH_SEPARATOR '/'
+# define SEARCHPATH_SEPARATOR ':'
+# define FIRST_SEARCHPATH_SEPARATOR(s) (first_searchpath_separator((s), SEARCHPATH_SEPARATOR))
+# define FIRST_PATH_SEPARATOR(s) (first_path_separator((s), PATH_SEPARATOR, PATH_SEPARATOR))
+# define LAST_PATH_SEPARATOR(s) (last_path_separator((s), PATH_SEPARATOR, PATH_SEPARATOR))
+#endif
+#define CONTAINS_PATH_SEPARATOR(s) (FIRST_PATH_SEPARATOR(s) != NULL)
+#define IS_ABSOLUTE_PATH(s) (is_absolute_path(s))
+
 /*@-incondefs@*/
 /*@mayexit@*/ /*@only@*/ /*@out@*/ /*@unused@*/
 void * xmalloc (size_t size)
@@ -64,9 +92,25 @@
 	/*@*/;
 /*@=incondefs@*/
 
+#ifndef __cplusplus
+#if defined(__GNUC__) && !defined(__GNUC_STDC_INLINE__)
+/* old GNU behavior */
+#define ELIDABLE_INLINE extern inline
+#define ALWAYS_INLINE   static inline
+#else
+/* C99 standard */
+#define ELIDABLE_INLINE inline
+#define ALWAYS_INLINE   static inline
+#endif
+#else
+/* C++ */
+#define ELIDABLE_INLINE inline
+#define ALWAYS_INLINE   inline
+#endif
+
 #if !defined(HAVE_STPCPY)
 /* Copy SRC to DEST, returning the address of the terminating '\0' in DEST.  */
-static inline char * stpcpy (char *dest, const char * src) {
+ALWAYS_INLINE char * stpcpy (char *dest, const char * src) {
     register char *d = dest;
     register const char *s = src;
 
@@ -100,4 +144,88 @@
 #endif
 #define UNUSED(x) x __attribute__((__unused__))
 
+#if defined(_WIN32) || defined(__CYGWIN__)
+ALWAYS_INLINE char * first_searchpath_separator_mbs(const char *s, char c)
+{
+  return (char *) _mbschr((unsigned char *)(s), (unsigned int)c);
+}
+ALWAYS_INLINE char * first_path_separator_mbs(const char *s, char c1, char c2)
+{
+  if (c1 == c2)
+    return (char *) _mbschr((unsigned char *)(s), (unsigned int)c1);
+  else
+    {
+      char *p, *q;
+      p = (char *) _mbschr((unsigned char *)(s), (unsigned int)c1);
+      q = (char *) _mbschr((unsigned char *)(s), (unsigned int)c2);
+      if (p && q) return (p < q ? p : q);
+      if (p)      return p;
+      if (q)      return q;
+    }
+  return NULL;
+
+}
+ALWAYS_INLINE char * last_path_separator_mbs(const char *s, char c1, char c2)
+{
+  if (c1 == c2)
+    return (char *) _mbsrchr((unsigned char *)(s), (unsigned int)c1);
+  else
+    {
+      char *p, *q;
+      p = (char *) _mbsrchr((unsigned char *)(s), (unsigned int)c1);
+      q = (char *) _mbsrchr((unsigned char *)(s), (unsigned int)c2);
+      if (p && q) return (p > q ? p : q);
+      if (p)      return p;
+      if (q)      return q;
+    }
+  return NULL;
+
+}
+#else
+ALWAYS_INLINE char * first_searchpath_separator(const char *s, char c)
+{
+  return strchr(s, c);
+}
+ALWAYS_INLINE char * first_path_separator(const char *s, char c1, char c2)
+{
+  if (c1 == c2)
+    return strchr(s, c1);
+  else
+    {
+      char *p, *q;
+      p = strchr(s, c1);
+      q = strchr(s, c2);
+      if (p && q) return (p < q ? p : q);
+      if (p)      return p;
+      if (q)      return q;
+    }
+  return NULL;
+}
+ALWAYS_INLINE char * last_path_separator(const char *s, char c1, char c2)
+{
+  if (c1 == c2)
+    return strrchr(s, c1);
+  else
+    {
+      char *p, *q;
+      p = strrchr(s, c1);
+      q = strrchr(s, c2);
+      if (p && q) return (p > q ? p : q);
+      if (p)      return p;
+      if (q)      return q;
+    }
+  return NULL;
+}
+#endif
+ALWAYS_INLINE int is_absolute_path(const char *s)
+{
+#ifdef HAVE_DOS_BASED_FILE_SYSTEM
+  /* limitation: treats A:file as if it were A:/file */
+  if (isalpha ((unsigned char) s[0]) && s[1] == ':')
+    return 1;
+#endif
+  /* also handles //svr/share by "accident" */
+  return (FIRST_PATH_SEPARATOR(s) == s);
+}
+
 #include "popt.h"
