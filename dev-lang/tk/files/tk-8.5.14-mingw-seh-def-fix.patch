diff -Nur tk8.5.14.old/win/tkWin32Dll.c tk8.5.14/win/tkWin32Dll.c
--- tk8.5.14.old/win/tkWin32Dll.c	2013-03-22 23:46:27.000000000 +0800
+++ tk8.5.14/win/tkWin32Dll.c	2013-10-04 09:12:54.012797300 +0800
@@ -17,17 +17,17 @@
 /*
  * Unlike Borland and Microsoft, we don't register exception handlers by
  * pushing registration records onto the runtime stack. Instead, we register
- * them by creating an EXCEPTION_REGISTRATION within the activation record.
+ * them by creating an TCL_EXCEPTION_REGISTRATION within the activation record.
  */
 
-typedef struct EXCEPTION_REGISTRATION {
-    struct EXCEPTION_REGISTRATION *link;
+typedef struct TCL_EXCEPTION_REGISTRATION {
+    struct TCL_EXCEPTION_REGISTRATION *link;
     EXCEPTION_DISPOSITION (*handler)(
 	    struct _EXCEPTION_RECORD*, void*, struct _CONTEXT*, void*);
     void *ebp;
     void *esp;
     int status;
-} EXCEPTION_REGISTRATION;
+} TCL_EXCEPTION_REGISTRATION;
 
 /*
  * Need to add noinline flag to DllMain declaration so that gcc -O3 does not
@@ -102,7 +102,7 @@
     LPVOID reserved)
 {
 #ifdef HAVE_NO_SEH
-    EXCEPTION_REGISTRATION registration;
+    TCL_EXCEPTION_REGISTRATION registration;
 #endif
 
     /*
@@ -127,7 +127,7 @@
 	__asm__ __volatile__ (
 
 	    /*
-	     * Construct an EXCEPTION_REGISTRATION to protect the call to
+	     * Construct an TCL_EXCEPTION_REGISTRATION to protect the call to
 	     * TkFinalize
 	     */
 
@@ -141,7 +141,7 @@
 	    "movl	%[error],	0x20(%%rdx)"	"\n\t" /* status */
 
 	    /*
-	     * Link the EXCEPTION_REGISTRATION on the chain
+	     * Link the TCL_EXCEPTION_REGISTRATION on the chain
 	     */
 
 	    "movq	%%rdx,		%%gs:0"		"\n\t"
@@ -154,7 +154,7 @@
 	    "call	TkFinalize"			"\n\t"
 
 	    /*
-	     * Come here on a normal exit. Recover the EXCEPTION_REGISTRATION
+	     * Come here on a normal exit. Recover the TCL_EXCEPTION_REGISTRATION
 	     * and store a TCL_OK status
 	     */
 
@@ -164,7 +164,7 @@
 	    "jmp	2f"				"\n"
 
 	    /*
-	     * Come here on an exception. Get the EXCEPTION_REGISTRATION that
+	     * Come here on an exception. Get the TCL_EXCEPTION_REGISTRATION that
 	     * we previously put on the chain.
 	     */
 
@@ -174,7 +174,7 @@
 
 	    /*
 	     * Come here however we exited. Restore context from the
-	     * EXCEPTION_REGISTRATION in case the stack is unbalanced.
+	     * TCL_EXCEPTION_REGISTRATION in case the stack is unbalanced.
 	     */
 
 	    "2:"					"\t"
@@ -197,7 +197,7 @@
 	__asm__ __volatile__ (
 
 	    /*
-	     * Construct an EXCEPTION_REGISTRATION to protect the call to
+	     * Construct an TCL_EXCEPTION_REGISTRATION to protect the call to
 	     * TkFinalize
 	     */
 
@@ -211,7 +211,7 @@
 	    "movl	%[error],	0x10(%%edx)"	"\n\t" /* status */
 
 	    /*
-	     * Link the EXCEPTION_REGISTRATION on the chain
+	     * Link the TCL_EXCEPTION_REGISTRATION on the chain
 	     */
 
 	    "movl	%%edx,		%%fs:0"		"\n\t"
@@ -224,7 +224,7 @@
 	    "call	_TkFinalize"			"\n\t"
 
 	    /*
-	     * Come here on a normal exit. Recover the EXCEPTION_REGISTRATION
+	     * Come here on a normal exit. Recover the TCL_EXCEPTION_REGISTRATION
 	     * and store a TCL_OK status
 	     */
 
@@ -234,7 +234,7 @@
 	    "jmp	2f"				"\n"
 
 	    /*
-	     * Come here on an exception. Get the EXCEPTION_REGISTRATION that
+	     * Come here on an exception. Get the TCL_EXCEPTION_REGISTRATION that
 	     * we previously put on the chain.
 	     */
 
@@ -245,7 +245,7 @@
 
 	    /*
 	     * Come here however we exited. Restore context from the
-	     * EXCEPTION_REGISTRATION in case the stack is unbalanced.
+	     * TCL_EXCEPTION_REGISTRATION in case the stack is unbalanced.
 	     */
 
 	    "2:"					"\t"
